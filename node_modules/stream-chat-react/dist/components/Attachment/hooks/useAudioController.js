import { useCallback, useEffect, useRef, useState } from 'react';
import { useChannelActionContext, useTranslationContext } from '../../../context';
export var elementIsPlaying = function (audioElement) {
    return audioElement && !(audioElement.paused || audioElement.ended);
};
var DEFAULT_PLAYBACK_RATES = [1.0, 1.5, 2.0];
export var useAudioController = function (_a) {
    var _b = _a === void 0 ? {} : _a, durationSeconds = _b.durationSeconds, _c = _b.playbackRates, playbackRates = _c === void 0 ? DEFAULT_PLAYBACK_RATES : _c;
    var addNotification = useChannelActionContext('useAudioController').addNotification;
    var t = useTranslationContext('useAudioController').t;
    var _d = useState(false), isPlaying = _d[0], setIsPlaying = _d[1];
    var _e = useState(0), secondsElapsed = _e[0], setSecondsElapsed = _e[1];
    var _f = useState(0), playbackRateIndex = _f[0], setPlaybackRateIndex = _f[1];
    var audioRef = useRef(null);
    var togglePlay = useCallback(function () {
        if (!audioRef.current)
            return;
        if (!elementIsPlaying(audioRef.current)) {
            audioRef.current.play();
            setIsPlaying(true);
        }
        else {
            audioRef.current.pause();
            setIsPlaying(false);
        }
    }, []);
    var increasePlaybackRate = function () {
        setPlaybackRateIndex(function (prev) {
            if (!audioRef.current)
                return prev;
            var nextIndex = prev === playbackRates.length - 1 ? 0 : prev + 1;
            audioRef.current.playbackRate = playbackRates[nextIndex];
            return nextIndex;
        });
    };
    var seek = useCallback(function (_a) {
        var clientX = _a.clientX, currentTarget = _a.currentTarget;
        if (!audioRef.current)
            return;
        var _b = currentTarget.getBoundingClientRect(), width = _b.width, x = _b.x;
        var ratio = (clientX - x) / width;
        var currentTime = ratio * audioRef.current.duration;
        setSecondsElapsed(currentTime);
        audioRef.current.currentTime = currentTime;
    }, []);
    useEffect(function () {
        if (!audioRef.current)
            return;
        var audioElement = audioRef.current;
        var handleEnded = function () {
            var _a, _b;
            setSecondsElapsed((_b = (_a = audioElement === null || audioElement === void 0 ? void 0 : audioElement.duration) !== null && _a !== void 0 ? _a : durationSeconds) !== null && _b !== void 0 ? _b : 0);
            setIsPlaying(false);
        };
        audioElement.addEventListener('ended', handleEnded);
        var handleError = function () {
            addNotification(t('Error reproducing the recording'), 'error');
        };
        audioElement.addEventListener('error', handleError);
        var handleTimeupdate = function () {
            setSecondsElapsed(audioElement === null || audioElement === void 0 ? void 0 : audioElement.currentTime);
        };
        audioElement.addEventListener('timeupdate', handleTimeupdate);
        return function () {
            audioElement.pause();
            audioElement.removeEventListener('ended', handleEnded);
            audioElement.removeEventListener('error', handleError);
            audioElement.removeEventListener('timeupdate', handleTimeupdate);
        };
    }, [addNotification, durationSeconds, t]);
    return {
        audioRef: audioRef,
        increasePlaybackRate: increasePlaybackRate,
        isPlaying: isPlaying,
        playbackRate: playbackRates[playbackRateIndex],
        progress: audioRef.current && secondsElapsed ? (secondsElapsed / audioRef.current.duration) * 100 : 0,
        secondsElapsed: secondsElapsed,
        seek: seek,
        togglePlay: togglePlay,
    };
};
